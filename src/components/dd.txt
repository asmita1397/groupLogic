<template>
  <div class="mainDiv" :style="divStyle" ref="maindivRef" @mousedown.stop="handleMouseDown($event,'drag')">
    <div class="handle handle-tl"  @mousedown.stop="handleMouseDown($event,'nw')"></div>
    <div class="handle handle-tr" @mousedown.stop="handleMouseDown($event,'ne')"></div>
    <div class="handle handle-tm" @mousedown.stop="handleMouseDown($event,'n-resize')"></div>
    <div class="handle handle-ml"   @mousedown.stop="handleMouseDown($event,'w-resize')"></div>
    <div class="handle handle-mr"  @mousedown.stop="handleMouseDown($event,'e-resize')"></div>
    <div class="handle handle-bl"  @mousedown.stop="handleMouseDown($event,'sw')"></div>
    <div class="handle handle-br"  @mousedown.stop="handleMouseDown($event,'se')"></div>
    <div class="handle handle-bm"  @mousedown.stop="handleMouseDown($event,'s-resize')"></div>
   <div v-for="(control,index) in controlData" :key="index">
      <div
        :class="[control.isActivate?'mainDiv':'mainDiv1']"
        v-if="control.group"
       :style="{width:control.width,  height: control.height, left:control.left,top: control.top,position:position}"
        :ref="control.id"    
      >
        <label class="label-style" 
        :style="{width:control.width,  height: control.height, left:`${parseInt(control.left)-parseInt(divStyle.left)}px`,top: `${parseInt(control.top)-parseInt(divStyle.top)}px`, position:'absolute'}"

        >
        {{control.id}}</label>
      </div>
    </div>
    <p>jjjjjj</p>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Prop } from "vue-property-decorator";
import { EventBus } from "./event-bus";
import ResizeDiv from "./ResizeDiv.vue";

@Component({
  components: {ResizeDiv}
})
export default class ScrollDiv extends Vue {
   positions: any = {
    clientX: "",
    clientY: "",
    movementX: 0,
    movementY: 0
  };
   divStyle = {
    width: "0px",
    height: "0px",
    left: "0px",
    top: "0px",
    display:"none"
  };
  resizeDiv=""
  selectedControls: any =[]
  controlData: any=[]
  refOfResizeDiv=""
  mounted()
  {
   
    EventBus.$on('dragGroup',()=>{
       this.selfFunction()
    })
    EventBus.$on('group-control',(groupControlData: any,groupRef: any)=>
    {
          console.log(groupControlData,groupRef) 
          this.controlData=  groupControlData 
          this.refOfResizeDiv =groupRef
    })
    console.log(this.controlData)
        
     EventBus.$on('createGroup',()=>
     {
         this.createGroupBoundary()
     })
    
  }
  selfFunction()
  {
   
         EventBus.$emit("dataRef",this.divStyle,this.$refs)
  }
  
  createGroupBoundary()
  {

    this.selectedControls=[]
             for (let i = 0; i < this.controlData.length; i++) {
      if (this.controlData[i].group === 'group1') {
        this.selectedControls = [...this.selectedControls, this.controlData[i]];
      }
    }
            const styleLeft = []
            const styleWidth = []
            const styleTop = []
            const styleHeight = []

            for (const controlKey in this.selectedControls) {
            
                styleLeft.push(parseInt(this.selectedControls[controlKey].left))
                styleTop.push(parseInt(this.selectedControls[controlKey].top))
                styleWidth.push(parseInt(this.selectedControls[controlKey].width) + parseInt(this.selectedControls[controlKey].left))
                styleHeight.push(parseInt(this.selectedControls[controlKey].height) + parseInt(this.selectedControls[controlKey].top))

            }
            this.divStyle = {
              ...this.divStyle,
                left: `${Math.min(...styleLeft)}px`,
                top: `${Math.min(...styleTop)}px`,
                width: `${Math.max(...styleWidth) - Math.min(...styleLeft)}px`,
                height: ` ${Math.max(...styleHeight) - Math.min(...styleTop)}px`,
                display:"block"
            }
            console.log(this.divStyle)
  }


  handleMouseDown(event: any,handler: string) {
    this.selectedControls = [];
 
    this.resizeDiv = handler;
    this.positions.clientX = event.clientX;
    this.positions.clientY = event.clientY;
    for (let i = 0; i < this.controlData.length; i++) {
      if (this.controlData[i].group === 'group1') {
        this.selectedControls = [...this.selectedControls, this.controlData[i]];
      }
    }
    document.onmousemove = this.elementDrag;
    document.onmouseup = this.closeDragElement;
  }
  

   elementDrag(event: any): void {
    event.preventDefault();

    this.positions.movementX = this.positions.clientX - event.clientX;
    this.positions.movementY = this.positions.clientY - event.clientY;
    this.positions.clientX = event.clientX;
    this.positions.clientY = event.clientY;
    if(this.resizeDiv==="nw")
    {
    this.divStyle.top =
      (this as any).$refs["maindivRef"].offsetTop -
      this.positions.movementY +
      "px";
    this.divStyle.left =
      (this as any).$refs["maindivRef"].offsetLeft -
      this.positions.movementX +
      "px";
     this.divStyle.width =
      parseInt(this.divStyle.width)+
      this.positions.movementX +
      "px";
      this.divStyle.height =
     parseInt(this.divStyle.height) +
      this.positions.movementY +
      "px";



/* 
this.controlData[0].top =
      (this as any).$refs[this.controlData[0].id][0].offsetTop -
      this.positions.movementY +
      "px";
    this.controlData[0].left =
        (this as any).$refs[this.controlData[0].id][0].offsetLeft -
      this.positions.movementX +
      "px";
     this.controlData[0].width =
      parseInt(this.controlData[0].width)+
      this.positions.movementX +
      "px";
      this.controlData[0].height =
     parseInt(this.controlData[0].height) +
      this.positions.movementY +
      "px"; */

    }
      
  }

  closeDragElement(): void {
    document.onmouseup = null;
    document.onmousemove = null;
  }



 

  
 
}
</script>
<style scoped>
.mainDiv {
  position: absolute;
  --border-width: 5;
  --stripe-distance: 2px;
  border: calc(var(--border-width) * 1px) solid transparent;
  border-image: repeating-linear-gradient(
      -45deg,
      black,
      transparent 2px,
      transparent var(--stripe-distance),
      black calc(var(--stripe-distance) + 0.2px)
    )
    var(--border-width);
}

.handle {
  box-sizing: border-box;
  position: absolute;
  width: 6px;
  height: 6px;

  background: white;
  border: 1px solid #333;
}
.handle-tl {
  top: -5px;
  left: -5px;
  cursor: nw-resize;
}
.handle-tm {
  top: -5px;
  left: 50%;
  margin-left: -5px;
  cursor: n-resize;
}
.handle-tr {
  top: -5px;
  right: -5px;
  cursor: ne-resize;
}
.handle-ml {
  top: 50%;
  margin-top: -5px;
  left: -5px;
  cursor: w-resize;
}
.handle-mr {
  top: 50%;
  margin-top: -5px;
  right: -5px;
  cursor: e-resize;
}
.handle-bl {
  bottom: -5px;
  left: -5px;
  cursor: sw-resize;
}
.handle-bm {
  bottom: -5px;
  left: 50%;
  margin-left: -5px;
  cursor: s-resize;
}
.handle-br {
  bottom: -5px;
  right: -5px;
  cursor: se-resize;
}

.label-style {
  float: left;
  overflow: hidden;
  background-color:green;
}
</style>